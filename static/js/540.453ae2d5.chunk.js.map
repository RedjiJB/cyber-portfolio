{"version":3,"file":"static/js/540.453ae2d5.chunk.js","mappings":"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AQjD,OACViF,EAAMhC,EAAQ,GAGdgC,EAAI1E,SAAW0C,EAGjBgC,EAAMhC,EAGZ,CAEA,OAAOgC,CACT,CClFmBC,CAAiBF,EAAMH,EAC1C,C,+CClBO,MAAME,EAAgB,CAC3B7B,MAAO,CAAC,UACRuB,cAAe,gBACfC,QAAS,CAAC,OAAQ,MAClBjB,UAAW,CACT0B,MAAO,CAAC,SACRC,MAAO,CAAC,SACRC,MAAO,CAAC,SACRC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,UAEPpB,UAAW,CACTqB,KAAM,CAAC,OAAQ,QAAS,SAAU,OAAQ,MAAO,QACjDC,KAAM,CAAC,OAAQ,SACfC,IAAK,CAAC,OAAQ,SACdC,SAAU,CAAC,OAAQ,UAErBpC,SAAU,CACR,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,SACA,KACA,IACA,MACA,OACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,IACA,KACA,KACA,QACA,QACA,QACA,QACA,aACA,KACA,KACA,KACA,MACA,IACA,OACA,MACA,KACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,SACA,UACA,UACA,UACA,SACA,aACA,OACA,MACA,OACA,MACA,OACA,QACA,OACA,OACA,MACA,SAEF/B,WAAY,CACVoE,EAAG,CAAC,QACJC,IAAK,CAAC,MAAO,YACbC,MAAO,CACL,CAAC,OAAQ,YACT,CAAC,YAAY,IAEfC,GAAI,CAAC,CAAC,YAAa,mBACnBC,IAAK,CAAC,YAAa,YACnBC,WAAY,CAAC,QACbC,IAAK,CAAC,QACNC,IAAK,CAAC,QACNC,EAAG,CAAC,QACJ,IAAK,CACH,OACA,SACA,gBACA,YACA,SACA,QACA,MACA,kBACA,aACA,YACA,iBACA,OACA,SACA,cACA,cACA,OACA,UACA,UACA,UACA,QACA,OACA,UACA,QACA,UACA,SACA,WACA,MACA,WACA,UACA,UACA,QACA,UACA,SACA,WACA,SACA,QACA,KACA,QACA,OACA,YACA,QACA,SACA,WACA,OACA,SACA,UACA,SACA,OACA,SACA,WACA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","sources":["../node_modules/style-to-object/index.js","../node_modules/hast-util-sanitize/lib/index.js","../node_modules/rehype-sanitize/index.js","../node_modules/hast-util-sanitize/lib/schema.js","../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/react-markdown/node_modules/react-is/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/unified/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/lib/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/unist-util-position/lib/index.js","../node_modules/mdast-util-definitions/lib/index.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/unist-util-generated/lib/index.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/remark-rehype/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/react-markdown/lib/rehype-filter.js","../node_modules/hast-util-whitespace/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/index.mjs","../node_modules/react-markdown/lib/uri-transformer.js","../node_modules/react-markdown/lib/ast-to-react.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/react-markdown/lib/react-markdown.js","../node_modules/is-buffer/index.js","../node_modules/ccount/index.js","../node_modules/mdast-util-gfm-autolink-literal/node_modules/micromark-util-character/index.js","../node_modules/mdast-util-find-and-replace/node_modules/unist-util-is/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/index.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../node_modules/mdast-util-gfm-footnote/node_modules/micromark-util-normalize-identifier/index.js","../node_modules/mdast-util-gfm-footnote/lib/index.js","../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-to-markdown/lib/handle/break.js","../node_modules/mdast-util-to-markdown/lib/handle/code.js","../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","../node_modules/mdast-util-to-markdown/node_modules/micromark-util-character/index.js","../node_modules/mdast-util-to-markdown/node_modules/micromark-util-classify-character/index.js","../node_modules/mdast-util-to-markdown/lib/util/encode-info.js","../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../node_modules/mdast-util-to-markdown/node_modules/unist-util-is/lib/index.js","../node_modules/mdast-util-to-markdown/node_modules/unist-util-visit-parents/lib/index.js","../node_modules/mdast-util-to-markdown/node_modules/mdast-util-to-string/lib/index.js","../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../node_modules/mdast-util-to-markdown/node_modules/unist-util-visit/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/html.js","../node_modules/mdast-util-to-markdown/lib/handle/image.js","../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../node_modules/mdast-util-to-markdown/lib/handle/link.js","../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../node_modules/mdast-util-phrasing/node_modules/unist-util-is/lib/index.js","../node_modules/mdast-util-phrasing/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../node_modules/mdast-util-to-markdown/lib/handle/index.js","../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../node_modules/longest-streak/index.js","../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../node_modules/mdast-util-to-markdown/lib/handle/list.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../node_modules/mdast-util-to-markdown/lib/handle/root.js","../node_modules/mdast-util-to-markdown/lib/handle/text.js","../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../node_modules/micromark-extension-gfm/node_modules/micromark-util-chunked/index.js","../node_modules/micromark-extension-gfm/node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-extension-gfm-autolink-literal/node_modules/micromark-util-character/index.js","../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/micromark-extension-gfm-footnote/node_modules/micromark-util-character/index.js","../node_modules/micromark-extension-gfm-footnote/node_modules/micromark-factory-space/index.js","../node_modules/micromark-extension-gfm-footnote/node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-extension-gfm-footnote/node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/node_modules/micromark-util-chunked/index.js","../node_modules/micromark-extension-gfm-strikethrough/node_modules/micromark-util-character/index.js","../node_modules/micromark-extension-gfm-strikethrough/node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-extension-gfm-strikethrough/node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-table/node_modules/micromark-util-character/index.js","../node_modules/micromark-extension-gfm-table/node_modules/micromark-factory-space/index.js","../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../node_modules/micromark-extension-gfm-table/lib/infer.js","../node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/node_modules/micromark-util-character/index.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/node_modules/micromark-factory-space/index.js","../node_modules/micromark-extension-gfm/index.js","../node_modules/remark-gfm/lib/index.js","../node_modules/mdast-util-gfm/lib/index.js","../node_modules/@material-ui/system/esm/styleFunctionSx.js","../node_modules/@material-ui/system/esm/compose.js","../node_modules/@material-ui/system/esm/style.js","../node_modules/@material-ui/system/esm/borders.js","../node_modules/@material-ui/system/esm/display.js","../node_modules/@material-ui/system/esm/flexbox.js","../node_modules/@material-ui/system/esm/grid.js","../node_modules/@material-ui/system/esm/positions.js","../node_modules/@material-ui/system/esm/palette.js","../node_modules/@material-ui/system/esm/shadows.js","../node_modules/@material-ui/system/esm/sizing.js","../node_modules/@material-ui/system/esm/typography.js","../node_modules/@material-ui/styles/esm/styled/styled.js","../node_modules/@material-ui/core/esm/styles/styled.js","../node_modules/@material-ui/core/esm/Box/Box.js","../node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js","../node_modules/@material-ui/core/esm/internal/svg-icons/Person.js","../node_modules/@material-ui/core/esm/Avatar/Avatar.js","../node_modules/@material-ui/icons/esm/ArrowBack.js","../node_modules/@material-ui/core/esm/internal/svg-icons/Cancel.js","../node_modules/@material-ui/core/esm/Chip/Chip.js"],"sourcesContent":["var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Content} Content\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {Content | Root} Node\n *\n * @typedef {Properties[string]} PropertyValue\n *   Possible property values.\n * @typedef {string | number | boolean} PrimitivePropertyValue\n *   Possible primitive HTML attribute values.\n *\n * @typedef {Record<string, Array<string | [string, ...Array<PrimitivePropertyValue | RegExp>]>>} Attributes\n *  Map of tag names to allow lists for each property.\n * @typedef {Record<string, Array<PrimitivePropertyValue | RegExp>>} AttributeClean\n *   Normalized input.\n *\n * @typedef Schema\n *   Sanitization configuration.\n * @property {Attributes | undefined} [attributes]\n *   Map of tag names to allowed properties.\n *\n *   The special `'*'` key defines property names allowed on all elements.\n * @property {Record<string, Record<string, PropertyValue>> | undefined} [required]\n *   Map of tag names to required property names and their default property value.\n * @property {Array<string> | undefined} [tagNames]\n *   List of allowed tag names.\n * @property {Record<string, Array<string>> | undefined} [protocols]\n *   Map of protocols to allow in property values.\n * @property {Record<string, Array<string>> | undefined} [ancestors]\n *   Map of tag names to their required ancestor elements.\n * @property {Array<string> | undefined} [clobber]\n *   List of allowed property names which can clobber.\n * @property {string | undefined} [clobberPrefix]\n *   Prefix to use before potentially clobbering property names.\n * @property {Array<string> | undefined} [strip]\n *   Names of elements to strip from the tree.\n * @property {boolean | undefined} [allowComments]\n *   Whether to allow comments.\n * @property {boolean | undefined} [allowDoctypes]\n *   Whether to allow doctypes.\n *\n * @typedef {(schema: Schema, value: any, node: any, stack: Array<string>) => unknown} Handler\n * @typedef {Record<string, Handler>} NodeDefinition\n * @typedef {((schema: Schema, node: Node) => NodeDefinition | undefined)} NodeDefinitionGetter\n * @typedef {Record<string, NodeDefinition | NodeDefinitionGetter>} NodeSchema\n */\n\nimport {defaultSchema} from './schema.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {NodeSchema} */\nconst nodeSchema = {\n  root: {children: all},\n  doctype: handleDoctype,\n  comment: handleComment,\n  element: {\n    tagName: handleTagName,\n    properties: handleProperties,\n    children: all\n  },\n  text: {value: handleValue},\n  '*': {data: allow, position: allow}\n}\n\n/**\n * Utility to sanitize a tree\n *\n * @param {Node} node\n *   Hast tree to sanitize\n * @param {Schema} [schema]\n *   Schema defining how to sanitize - defaults to Github style sanitation\n */\nexport function sanitize(node, schema) {\n  /** @type {Node} */\n  let ctx = {type: 'root', children: []}\n\n  if (node && typeof node === 'object' && node.type) {\n    const replace = one(\n      Object.assign({}, defaultSchema, schema || {}),\n      node,\n      []\n    )\n\n    if (replace) {\n      if (Array.isArray(replace)) {\n        if (replace.length === 1) {\n          ctx = replace[0]\n        } else {\n          // @ts-expect-error Assume `root` is not a child.\n          ctx.children = replace\n        }\n      } else {\n        ctx = replace\n      }\n    }\n  }\n\n  return ctx\n}\n\n/**\n * Sanitize `node`.\n *\n * @param {Schema} schema\n * @param {Node} node\n * @param {Array<string>} stack\n * @returns {Node | Array<Node> | undefined}\n */\nfunction one(schema, node, stack) {\n  const type = node && node.type\n  /** @type {Node} */\n  // @ts-expect-error rest of props added later.\n  const replacement = {type: node.type}\n  /** @type {boolean | undefined} */\n  let replace\n\n  if (own.call(nodeSchema, type)) {\n    /** @type {NodeDefinition | NodeDefinitionGetter | undefined} */\n    let definition = nodeSchema[type]\n\n    if (typeof definition === 'function') {\n      definition = definition(schema, node)\n    }\n\n    if (definition) {\n      const allowed = Object.assign({}, definition, nodeSchema['*'])\n      /** @type {string} */\n      let key\n\n      replace = true\n\n      for (key in allowed) {\n        if (own.call(allowed, key)) {\n          // @ts-expect-error: fine.\n          // type-coverage:ignore-next-line\n          const result = allowed[key](schema, node[key], node, stack)\n\n          // eslint-disable-next-line max-depth\n          if (result === false) {\n            replace = undefined\n            // Set the non-safe value.\n            // @ts-expect-error: fine.\n            // type-coverage:ignore-next-line\n            replacement[key] = node[key]\n          } else if (result !== undefined && result !== null) {\n            // @ts-expect-error: fine.\n            // type-coverage:ignore-next-line\n            replacement[key] = result\n          }\n        }\n      }\n    }\n  }\n\n  if (replace) {\n    return replacement\n  }\n\n  return replacement.type === 'element' &&\n    schema.strip &&\n    !schema.strip.includes(replacement.tagName)\n    ? replacement.children\n    : undefined\n}\n\n/**\n * Sanitize `children`.\n *\n * @type {Handler}\n * @param {Array<Node>} children\n * @param {Node} node\n * @returns {Array<Node>}\n */\nfunction all(schema, children, node, stack) {\n  /** @type {Array<Node>} */\n  const results = []\n\n  if (Array.isArray(children)) {\n    let index = -1\n\n    if (node.type === 'element') {\n      stack.push(node.tagName)\n    }\n\n    while (++index < children.length) {\n      const value = one(schema, children[index], stack)\n\n      if (value) {\n        if (Array.isArray(value)) {\n          results.push(...value)\n        } else {\n          results.push(value)\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      stack.pop()\n    }\n  }\n\n  return results\n}\n\n/** @type {NodeDefinitionGetter} */\nfunction handleDoctype(schema) {\n  return schema.allowDoctypes ? {name: handleDoctypeName} : undefined\n}\n\n/** @type {NodeDefinitionGetter} */\nfunction handleComment(schema) {\n  return schema.allowComments ? {value: handleCommentValue} : undefined\n}\n\n/**\n * Sanitize `properties`.\n *\n * @type {Handler}\n * @param {Properties} properties\n * @param {Element} node\n * @returns {Properties}\n */\nfunction handleProperties(schema, properties, node, stack) {\n  const name = handleTagName(schema, node.tagName, node, stack)\n  /* c8 ignore next */\n  const attrs = schema.attributes || {}\n  /* c8 ignore next */\n  const reqs = schema.required || {}\n  const props = properties || {}\n  const allowed = Object.assign(\n    {},\n    toPropertyValueMap(attrs['*']),\n    toPropertyValueMap(name && own.call(attrs, name) ? attrs[name] : [])\n  )\n  /** @type {Properties} */\n  const result = {}\n  /** @type {string} */\n  let key\n\n  for (key in props) {\n    if (own.call(props, key)) {\n      let value = props[key]\n      /** @type {AttributeClean[string]} */\n      let definition\n\n      if (own.call(allowed, key)) {\n        definition = allowed[key]\n      } else if (data(key) && own.call(allowed, 'data*')) {\n        definition = allowed['data*']\n      } else {\n        continue\n      }\n\n      value = Array.isArray(value)\n        ? handlePropertyValues(schema, value, key, definition)\n        : handlePropertyValue(schema, value, key, definition)\n\n      if (value !== undefined && value !== null) {\n        result[key] = value\n      }\n    }\n  }\n\n  if (name && own.call(reqs, name)) {\n    for (key in reqs[name]) {\n      if (!own.call(result, key)) {\n        result[key] = reqs[name][key]\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Always return a valid HTML5 doctype.\n *\n * @type {Handler}\n * @returns {string}\n */\nfunction handleDoctypeName() {\n  return 'html'\n}\n\n/**\n * Sanitize `tagName`.\n *\n * @param {Schema} schema\n * @param {string} tagName\n * @param {Node} _\n * @param {Array<string>} stack\n * @returns {string | false}\n */\nfunction handleTagName(schema, tagName, _, stack) {\n  const name = typeof tagName === 'string' ? tagName : ''\n  let index = -1\n\n  if (\n    !name ||\n    name === '*' ||\n    (schema.tagNames && !schema.tagNames.includes(name))\n  ) {\n    return false\n  }\n\n  // Some nodes can break out of their context if they don’t have a certain\n  // ancestor.\n  if (schema.ancestors && own.call(schema.ancestors, name)) {\n    while (++index < schema.ancestors[name].length) {\n      if (stack.includes(schema.ancestors[name][index])) {\n        return name\n      }\n    }\n\n    return false\n  }\n\n  return name\n}\n\n/**\n * See <https://html.spec.whatwg.org/multipage/parsing.html#serialising-html-fragments>\n *\n * @type {Handler}\n * @param {unknown} value\n * @returns {string}\n */\nfunction handleCommentValue(_, value) {\n  /** @type {string} */\n  const result = typeof value === 'string' ? value : ''\n  const index = result.indexOf('-->')\n  return index < 0 ? result : result.slice(0, index)\n}\n\n/**\n * Sanitize `value`.\n *\n * @type {Handler}\n * @param {unknown} value\n * @returns {string}\n */\nfunction handleValue(_, value) {\n  return typeof value === 'string' ? value : ''\n}\n\n/**\n * Allow `value`.\n *\n * @type {Handler}\n * @param {unknown} value\n */\nfunction allow(_, value) {\n  return value\n}\n\n/**\n * Sanitize a property value which is a list.\n *\n * @param {Schema} schema\n * @param {Array<unknown>} values\n * @param {string} prop\n * @param {AttributeClean[string]} definition\n * @returns {Array<string | number>}\n */\nfunction handlePropertyValues(schema, values, prop, definition) {\n  let index = -1\n  /** @type {Array<string | number>} */\n  const result = []\n\n  while (++index < values.length) {\n    const value = handlePropertyValue(schema, values[index], prop, definition)\n\n    if (value !== undefined && value !== null) {\n      // @ts-expect-error Assume no booleans were in arrays.\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Sanitize a property value.\n *\n * @param {Schema} schema\n * @param {unknown} value\n * @param {string} prop\n * @param {AttributeClean[string]} definition\n * @returns {PropertyValue}\n */\nfunction handlePropertyValue(schema, value, prop, definition) {\n  if (\n    (typeof value === 'boolean' ||\n      typeof value === 'number' ||\n      typeof value === 'string') &&\n    safeProtocol(schema, value, prop) &&\n    (definition.length === 0 ||\n      definition.some((allowed) =>\n        allowed && typeof allowed === 'object' && 'flags' in allowed\n          ? allowed.test(String(value))\n          : allowed === value\n      ))\n  ) {\n    return schema.clobberPrefix &&\n      schema.clobber &&\n      schema.clobber.includes(prop)\n      ? schema.clobberPrefix + value\n      : value\n  }\n}\n\n/**\n * Check whether `value` is a safe URL.\n *\n * @param {Schema} schema\n * @param {unknown} value\n * @param {string} prop\n * @returns {boolean}\n */\nfunction safeProtocol(schema, value, prop) {\n  const url = String(value)\n  const colon = url.indexOf(':')\n  const questionMark = url.indexOf('?')\n  const numberSign = url.indexOf('#')\n  const slash = url.indexOf('/')\n  const protocols =\n    schema.protocols && own.call(schema.protocols, prop)\n      ? schema.protocols[prop].concat()\n      : []\n  let index = -1\n\n  if (\n    protocols.length === 0 ||\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign)\n  ) {\n    return true\n  }\n\n  while (++index < protocols.length) {\n    if (\n      colon === protocols[index].length &&\n      url.slice(0, protocols[index].length) === protocols[index]\n    ) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Create a map from a list of props or a list of properties and values.\n *\n * @param {Attributes[string]} values\n * @returns {AttributeClean}\n */\nfunction toPropertyValueMap(values) {\n  /** @type {AttributeClean} */\n  const result = {}\n  let index = -1\n\n  while (++index < values.length) {\n    const value = values[index]\n\n    if (Array.isArray(value)) {\n      result[value[0]] = value.slice(1)\n    } else {\n      result[value] = []\n    }\n  }\n\n  return result\n}\n\n/**\n * Check if `prop` is a data property.\n *\n * @param {string} prop\n * @returns {boolean}\n */\nfunction data(prop) {\n  return prop.length > 4 && prop.slice(0, 4).toLowerCase() === 'data'\n}\n","/**\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('hast-util-sanitize').Schema} Options\n *   The sanitation schema defines how and if nodes and properties should be cleaned.\n *   See `hast-util-sanitize`.\n *   The default schema is exported as `defaultSchema`.\n */\n\nimport {sanitize as hastUtilSanitize, defaultSchema} from 'hast-util-sanitize'\n\n/**\n * Plugin to sanitize HTML.\n *\n * @type {import('unified').Plugin<[Options?] | Array<void>, Root, Root>}\n */\nexport default function rehypeSanitize(options = defaultSchema) {\n  // @ts-expect-error: assume input `root` matches output root.\n  return (tree) => hastUtilSanitize(tree, options)\n}\n\nexport {defaultSchema} from 'hast-util-sanitize'\n","/** @type {import('./index.js').Schema} */\nexport const defaultSchema = {\n  strip: ['script'],\n  clobberPrefix: 'user-content-',\n  clobber: ['name', 'id'],\n  ancestors: {\n    tbody: ['table'],\n    tfoot: ['table'],\n    thead: ['table'],\n    td: ['table'],\n    th: ['table'],\n    tr: ['table']\n  },\n  protocols: {\n    href: ['http', 'https', 'mailto', 'xmpp', 'irc', 'ircs'],\n    cite: ['http', 'https'],\n    src: ['http', 'https'],\n    longDesc: ['http', 'https']\n  },\n  tagNames: [\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'br',\n    'b',\n    'i',\n    'strong',\n    'em',\n    'a',\n    'pre',\n    'code',\n    'img',\n    'tt',\n    'div',\n    'ins',\n    'del',\n    'sup',\n    'sub',\n    'p',\n    'ol',\n    'ul',\n    'table',\n    'thead',\n    'tbody',\n    'tfoot',\n    'blockquote',\n    'dl',\n    'dt',\n    'dd',\n    'kbd',\n    'q',\n    'samp',\n    'var',\n    'hr',\n    'ruby',\n    'rt',\n    'rp',\n    'li',\n    'tr',\n    'td',\n    'th',\n    's',\n    'strike',\n    'summary',\n    'details',\n    'caption',\n    'figure',\n    'figcaption',\n    'abbr',\n    'bdo',\n    'cite',\n    'dfn',\n    'mark',\n    'small',\n    'span',\n    'time',\n    'wbr',\n    'input'\n  ],\n  attributes: {\n    a: ['href'],\n    img: ['src', 'longDesc'],\n    input: [\n      ['type', 'checkbox'],\n      ['disabled', true]\n    ],\n    li: [['className', 'task-list-item']],\n    div: ['itemScope', 'itemType'],\n    blockquote: ['cite'],\n    del: ['cite'],\n    ins: ['cite'],\n    q: ['cite'],\n    '*': [\n      'abbr',\n      'accept',\n      'acceptCharset',\n      'accessKey',\n      'action',\n      'align',\n      'alt',\n      'ariaDescribedBy',\n      'ariaHidden',\n      'ariaLabel',\n      'ariaLabelledBy',\n      'axis',\n      'border',\n      'cellPadding',\n      'cellSpacing',\n      'char',\n      'charOff',\n      'charSet',\n      'checked',\n      'clear',\n      'cols',\n      'colSpan',\n      'color',\n      'compact',\n      'coords',\n      'dateTime',\n      'dir',\n      'disabled',\n      'encType',\n      'htmlFor',\n      'frame',\n      'headers',\n      'height',\n      'hrefLang',\n      'hSpace',\n      'isMap',\n      'id',\n      'label',\n      'lang',\n      'maxLength',\n      'media',\n      'method',\n      'multiple',\n      'name',\n      'noHref',\n      'noShade',\n      'noWrap',\n      'open',\n      'prompt',\n      'readOnly',\n      'rel',\n      'rev',\n      'rows',\n      'rowSpan',\n      'rules',\n      'scope',\n      'selected',\n      'shape',\n      'size',\n      'span',\n      'start',\n      'summary',\n      'tabIndex',\n      'target',\n      'title',\n      'type',\n      'useMap',\n      'vAlign',\n      'value',\n      'vSpace',\n      'width',\n      'itemProp'\n    ]\n  },\n  required: {\n    input: {\n      type: 'checkbox',\n      disabled: true\n    }\n  }\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* global document */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = index\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {after: ']', before: value})\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false\n\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true\n  }\n\n  return {\n    handlers: {footnoteDefinition, footnoteReference},\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info)\n    let value = tracker.move('[^')\n    const exit = state.enter('footnoteDefinition')\n    const subexit = state.enter('label')\n    value += tracker.move(\n      state.safe(state.associationId(node), {before: value, after: ']'})\n    )\n    subexit()\n\n    value += tracker.move(']:')\n\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4)\n\n      value += tracker.move(\n        (firstLineBlank ? '\\n' : ' ') +\n          state.indentLines(\n            state.containerFlow(node, tracker.current()),\n            firstLineBlank ? mapAll : mapExceptFirst\n          )\n      )\n    }\n\n    exit()\n\n    return value\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank)\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  // Guard for older `mdast-util-from-markdown` contexts where `data` may be undefined\n  if (!this.data) this.data = {}\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  if (this.data) this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push(events.slice());\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      for (const element of slice) {\n        events.push(element);\n      }\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @import {Root} from 'mdast'\n * @import {Options} from 'remark-gfm'\n * @import {} from 'remark-parse'\n * @import {} from 'remark-stringify'\n * @import {Processor} from 'unified'\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor<Root>} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @import {Extension as FromMarkdownExtension} from 'mdast-util-from-markdown'\n * @import {Options} from 'mdast-util-gfm'\n * @import {Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(options),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport PropTypes from 'prop-types';\nimport { chainPropTypes } from '@material-ui/utils';\nimport merge from './merge';\n\nfunction omit(input, fields) {\n  var output = {};\n  Object.keys(input).forEach(function (prop) {\n    if (fields.indexOf(prop) === -1) {\n      output[prop] = input[prop];\n    }\n  });\n  return output;\n}\n\nvar warnedOnce = false;\n\nfunction styleFunctionSx(styleFunction) {\n  var newStyleFunction = function newStyleFunction(props) {\n    var output = styleFunction(props);\n\n    if (props.css) {\n      return _extends({}, merge(output, styleFunction(_extends({\n        theme: props.theme\n      }, props.css))), omit(props.css, [styleFunction.filterProps]));\n    }\n\n    if (props.sx) {\n      return _extends({}, merge(output, styleFunction(_extends({\n        theme: props.theme\n      }, props.sx))), omit(props.sx, [styleFunction.filterProps]));\n    }\n\n    return output;\n  };\n\n  newStyleFunction.propTypes = process.env.NODE_ENV !== 'production' ? _extends({}, styleFunction.propTypes, {\n    css: chainPropTypes(PropTypes.object, function (props) {\n      if (!warnedOnce && props.css !== undefined) {\n        warnedOnce = true;\n        return new Error('Material-UI: The `css` prop is deprecated, please use the `sx` prop instead.');\n      }\n\n      return null;\n    }),\n    sx: PropTypes.object\n  }) : {};\n  newStyleFunction.filterProps = ['css', 'sx'].concat(_toConsumableArray(styleFunction.filterProps));\n  return newStyleFunction;\n}\n/**\n *\n * @deprecated\n * The css style function is deprecated. Use the `styleFunctionSx` instead.\n */\n\n\nexport function css(styleFunction) {\n  if (process.env.NODE_ENV !== 'production') {\n    console.warn('Material-UI: The `css` function is deprecated. Use the `styleFunctionSx` instead.');\n  }\n\n  return styleFunctionSx(styleFunction);\n}\nexport default styleFunctionSx;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport merge from './merge';\n\nfunction compose() {\n  for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {\n    styles[_key] = arguments[_key];\n  }\n\n  var fn = function fn(props) {\n    return styles.reduce(function (acc, style) {\n      var output = style(props);\n\n      if (output) {\n        return merge(acc, output);\n      }\n\n      return acc;\n    }, {});\n  }; // Alternative approach that doesn't yield any performance gain.\n  // const handlers = styles.reduce((acc, style) => {\n  //   style.filterProps.forEach(prop => {\n  //     acc[prop] = style;\n  //   });\n  //   return acc;\n  // }, {});\n  // const fn = props => {\n  //   return Object.keys(props).reduce((acc, prop) => {\n  //     if (handlers[prop]) {\n  //       return merge(acc, handlers[prop](props));\n  //     }\n  //     return acc;\n  //   }, {});\n  // };\n\n\n  fn.propTypes = process.env.NODE_ENV !== 'production' ? styles.reduce(function (acc, style) {\n    return _extends(acc, style.propTypes);\n  }, {}) : {};\n  fn.filterProps = styles.reduce(function (acc, style) {\n    return acc.concat(style.filterProps);\n  }, []);\n  return fn;\n}\n\nexport default compose;","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport responsivePropType from './responsivePropType';\nimport { handleBreakpoints } from './breakpoints';\n\nfunction getPath(obj, path) {\n  if (!path || typeof path !== 'string') {\n    return null;\n  }\n\n  return path.split('.').reduce(function (acc, item) {\n    return acc && acc[item] ? acc[item] : null;\n  }, obj);\n}\n\nfunction style(options) {\n  var prop = options.prop,\n      _options$cssProperty = options.cssProperty,\n      cssProperty = _options$cssProperty === void 0 ? options.prop : _options$cssProperty,\n      themeKey = options.themeKey,\n      transform = options.transform;\n\n  var fn = function fn(props) {\n    if (props[prop] == null) {\n      return null;\n    }\n\n    var propValue = props[prop];\n    var theme = props.theme;\n    var themeMapping = getPath(theme, themeKey) || {};\n\n    var styleFromPropValue = function styleFromPropValue(propValueFinal) {\n      var value;\n\n      if (typeof themeMapping === 'function') {\n        value = themeMapping(propValueFinal);\n      } else if (Array.isArray(themeMapping)) {\n        value = themeMapping[propValueFinal] || propValueFinal;\n      } else {\n        value = getPath(themeMapping, propValueFinal) || propValueFinal;\n\n        if (transform) {\n          value = transform(value);\n        }\n      }\n\n      if (cssProperty === false) {\n        return value;\n      }\n\n      return _defineProperty({}, cssProperty, value);\n    };\n\n    return handleBreakpoints(props, propValue, styleFromPropValue);\n  };\n\n  fn.propTypes = process.env.NODE_ENV !== 'production' ? _defineProperty({}, prop, responsivePropType) : {};\n  fn.filterProps = [prop];\n  return fn;\n}\n\nexport default style;","import style from './style';\nimport compose from './compose';\n\nfunction getBorder(value) {\n  if (typeof value !== 'number') {\n    return value;\n  }\n\n  return \"\".concat(value, \"px solid\");\n}\n\nexport var border = style({\n  prop: 'border',\n  themeKey: 'borders',\n  transform: getBorder\n});\nexport var borderTop = style({\n  prop: 'borderTop',\n  themeKey: 'borders',\n  transform: getBorder\n});\nexport var borderRight = style({\n  prop: 'borderRight',\n  themeKey: 'borders',\n  transform: getBorder\n});\nexport var borderBottom = style({\n  prop: 'borderBottom',\n  themeKey: 'borders',\n  transform: getBorder\n});\nexport var borderLeft = style({\n  prop: 'borderLeft',\n  themeKey: 'borders',\n  transform: getBorder\n});\nexport var borderColor = style({\n  prop: 'borderColor',\n  themeKey: 'palette'\n});\nexport var borderRadius = style({\n  prop: 'borderRadius',\n  themeKey: 'shape'\n});\nvar borders = compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderRadius);\nexport default borders;","import style from './style';\nimport compose from './compose';\nexport var displayPrint = style({\n  prop: 'displayPrint',\n  cssProperty: false,\n  transform: function transform(value) {\n    return {\n      '@media print': {\n        display: value\n      }\n    };\n  }\n});\nexport var displayRaw = style({\n  prop: 'display'\n});\nexport var overflow = style({\n  prop: 'overflow'\n});\nexport var textOverflow = style({\n  prop: 'textOverflow'\n});\nexport var visibility = style({\n  prop: 'visibility'\n});\nexport var whiteSpace = style({\n  prop: 'whiteSpace'\n});\nexport default compose(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);","import style from './style';\nimport compose from './compose';\nexport var flexBasis = style({\n  prop: 'flexBasis'\n});\nexport var flexDirection = style({\n  prop: 'flexDirection'\n});\nexport var flexWrap = style({\n  prop: 'flexWrap'\n});\nexport var justifyContent = style({\n  prop: 'justifyContent'\n});\nexport var alignItems = style({\n  prop: 'alignItems'\n});\nexport var alignContent = style({\n  prop: 'alignContent'\n});\nexport var order = style({\n  prop: 'order'\n});\nexport var flex = style({\n  prop: 'flex'\n});\nexport var flexGrow = style({\n  prop: 'flexGrow'\n});\nexport var flexShrink = style({\n  prop: 'flexShrink'\n});\nexport var alignSelf = style({\n  prop: 'alignSelf'\n});\nexport var justifyItems = style({\n  prop: 'justifyItems'\n});\nexport var justifySelf = style({\n  prop: 'justifySelf'\n});\nvar flexbox = compose(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);\nexport default flexbox;","import style from './style';\nimport compose from './compose';\nexport var gridGap = style({\n  prop: 'gridGap'\n});\nexport var gridColumnGap = style({\n  prop: 'gridColumnGap'\n});\nexport var gridRowGap = style({\n  prop: 'gridRowGap'\n});\nexport var gridColumn = style({\n  prop: 'gridColumn'\n});\nexport var gridRow = style({\n  prop: 'gridRow'\n});\nexport var gridAutoFlow = style({\n  prop: 'gridAutoFlow'\n});\nexport var gridAutoColumns = style({\n  prop: 'gridAutoColumns'\n});\nexport var gridAutoRows = style({\n  prop: 'gridAutoRows'\n});\nexport var gridTemplateColumns = style({\n  prop: 'gridTemplateColumns'\n});\nexport var gridTemplateRows = style({\n  prop: 'gridTemplateRows'\n});\nexport var gridTemplateAreas = style({\n  prop: 'gridTemplateAreas'\n});\nexport var gridArea = style({\n  prop: 'gridArea'\n});\nvar grid = compose(gridGap, gridColumnGap, gridRowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);\nexport default grid;","import style from './style';\nimport compose from './compose';\nexport var position = style({\n  prop: 'position'\n});\nexport var zIndex = style({\n  prop: 'zIndex',\n  themeKey: 'zIndex'\n});\nexport var top = style({\n  prop: 'top'\n});\nexport var right = style({\n  prop: 'right'\n});\nexport var bottom = style({\n  prop: 'bottom'\n});\nexport var left = style({\n  prop: 'left'\n});\nexport default compose(position, zIndex, top, right, bottom, left);","import style from './style';\nimport compose from './compose';\nexport var color = style({\n  prop: 'color',\n  themeKey: 'palette'\n});\nexport var bgcolor = style({\n  prop: 'bgcolor',\n  cssProperty: 'backgroundColor',\n  themeKey: 'palette'\n});\nvar palette = compose(color, bgcolor);\nexport default palette;","import style from './style';\nvar boxShadow = style({\n  prop: 'boxShadow',\n  themeKey: 'shadows'\n});\nexport default boxShadow;","import style from './style';\nimport compose from './compose';\n\nfunction transform(value) {\n  return value <= 1 ? \"\".concat(value * 100, \"%\") : value;\n}\n\nexport var width = style({\n  prop: 'width',\n  transform: transform\n});\nexport var maxWidth = style({\n  prop: 'maxWidth',\n  transform: transform\n});\nexport var minWidth = style({\n  prop: 'minWidth',\n  transform: transform\n});\nexport var height = style({\n  prop: 'height',\n  transform: transform\n});\nexport var maxHeight = style({\n  prop: 'maxHeight',\n  transform: transform\n});\nexport var minHeight = style({\n  prop: 'minHeight',\n  transform: transform\n});\nexport var sizeWidth = style({\n  prop: 'size',\n  cssProperty: 'width',\n  transform: transform\n});\nexport var sizeHeight = style({\n  prop: 'size',\n  cssProperty: 'height',\n  transform: transform\n});\nexport var boxSizing = style({\n  prop: 'boxSizing'\n});\nvar sizing = compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);\nexport default sizing;","import style from './style';\nimport compose from './compose';\nexport var fontFamily = style({\n  prop: 'fontFamily',\n  themeKey: 'typography'\n});\nexport var fontSize = style({\n  prop: 'fontSize',\n  themeKey: 'typography'\n});\nexport var fontStyle = style({\n  prop: 'fontStyle',\n  themeKey: 'typography'\n});\nexport var fontWeight = style({\n  prop: 'fontWeight',\n  themeKey: 'typography'\n});\nexport var letterSpacing = style({\n  prop: 'letterSpacing'\n});\nexport var lineHeight = style({\n  prop: 'lineHeight'\n});\nexport var textAlign = style({\n  prop: 'textAlign'\n});\nvar typography = compose(fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign);\nexport default typography;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { chainPropTypes, getDisplayName } from '@material-ui/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport makeStyles from '../makeStyles';\n\nfunction omit(input, fields) {\n  var output = {};\n  Object.keys(input).forEach(function (prop) {\n    if (fields.indexOf(prop) === -1) {\n      output[prop] = input[prop];\n    }\n  });\n  return output;\n} // styled-components's API removes the mapping between components and styles.\n// Using components as a low-level styling construct can be simpler.\n\n\nexport default function styled(Component) {\n  var componentCreator = function componentCreator(style) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var name = options.name,\n        stylesOptions = _objectWithoutProperties(options, [\"name\"]);\n\n    if (process.env.NODE_ENV !== 'production' && Component === undefined) {\n      throw new Error(['You are calling styled(Component)(style) with an undefined component.', 'You may have forgotten to import it.'].join('\\n'));\n    }\n\n    var classNamePrefix = name;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        // Provide a better DX outside production.\n        var displayName = getDisplayName(Component);\n\n        if (displayName !== undefined) {\n          classNamePrefix = displayName;\n        }\n      }\n    }\n\n    var stylesOrCreator = typeof style === 'function' ? function (theme) {\n      return {\n        root: function root(props) {\n          return style(_extends({\n            theme: theme\n          }, props));\n        }\n      };\n    } : {\n      root: style\n    };\n    var useStyles = makeStyles(stylesOrCreator, _extends({\n      Component: Component,\n      name: name || Component.displayName,\n      classNamePrefix: classNamePrefix\n    }, stylesOptions));\n    var filterProps;\n    var propTypes = {};\n\n    if (style.filterProps) {\n      filterProps = style.filterProps;\n      delete style.filterProps;\n    }\n    /* eslint-disable react/forbid-foreign-prop-types */\n\n\n    if (style.propTypes) {\n      propTypes = style.propTypes;\n      delete style.propTypes;\n    }\n    /* eslint-enable react/forbid-foreign-prop-types */\n\n\n    var StyledComponent = /*#__PURE__*/React.forwardRef(function StyledComponent(props, ref) {\n      var children = props.children,\n          classNameProp = props.className,\n          clone = props.clone,\n          ComponentProp = props.component,\n          other = _objectWithoutProperties(props, [\"children\", \"className\", \"clone\", \"component\"]);\n\n      var classes = useStyles(props);\n      var className = clsx(classes.root, classNameProp);\n      var spread = other;\n\n      if (filterProps) {\n        spread = omit(spread, filterProps);\n      }\n\n      if (clone) {\n        return /*#__PURE__*/React.cloneElement(children, _extends({\n          className: clsx(children.props.className, className)\n        }, spread));\n      }\n\n      if (typeof children === 'function') {\n        return children(_extends({\n          className: className\n        }, spread));\n      }\n\n      var FinalComponent = ComponentProp || Component;\n      return /*#__PURE__*/React.createElement(FinalComponent, _extends({\n        ref: ref,\n        className: className\n      }, spread), children);\n    });\n    process.env.NODE_ENV !== \"production\" ? StyledComponent.propTypes = _extends({\n      /**\n       * A render function or node.\n       */\n      children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n      /**\n       * @ignore\n       */\n      className: PropTypes.string,\n\n      /**\n       * If `true`, the component will recycle it's children HTML element.\n       * It's using `React.cloneElement` internally.\n       *\n       * This prop will be deprecated and removed in v5\n       */\n      clone: chainPropTypes(PropTypes.bool, function (props) {\n        if (props.clone && props.component) {\n          return new Error('You can not use the clone and component prop at the same time.');\n        }\n\n        return null;\n      }),\n\n      /**\n       * The component used for the root node.\n       * Either a string to use a HTML element or a component.\n       */\n      component: PropTypes\n      /* @typescript-to-proptypes-ignore */\n      .elementType\n    }, propTypes) : void 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      StyledComponent.displayName = \"Styled(\".concat(classNamePrefix, \")\");\n    }\n\n    hoistNonReactStatics(StyledComponent, Component);\n    return StyledComponent;\n  };\n\n  return componentCreator;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { styled as styledWithoutDefault } from '@material-ui/styles';\nimport defaultTheme from './defaultTheme';\n\nvar styled = function styled(Component) {\n  var componentCreator = styledWithoutDefault(Component);\n  return function (style, options) {\n    return componentCreator(style, _extends({\n      defaultTheme: defaultTheme\n    }, options));\n  };\n};\n\nexport default styled;","import { borders, compose, display, flexbox, grid, palette, positions, shadows, sizing, spacing, typography, styleFunctionSx } from '@material-ui/system';\nimport styled from '../styles/styled';\nexport var styleFunction = styleFunctionSx(compose(borders, display, flexbox, grid, positions, palette, shadows, sizing, spacing, typography));\n/**\n * @ignore - do not document.\n */\n\nvar Box = styled('div')(styleFunction, {\n  name: 'MuiBox'\n});\nexport default Box;","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"\n}), 'Person');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport Person from '../internal/svg-icons/Person';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexShrink: 0,\n      width: 40,\n      height: 40,\n      fontFamily: theme.typography.fontFamily,\n      fontSize: theme.typography.pxToRem(20),\n      lineHeight: 1,\n      borderRadius: '50%',\n      overflow: 'hidden',\n      userSelect: 'none'\n    },\n\n    /* Styles applied to the root element if not `src` or `srcSet`. */\n    colorDefault: {\n      color: theme.palette.background.default,\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]\n    },\n\n    /* Styles applied to the root element if `variant=\"circle\"`. */\n    circle: {},\n\n    /* Styles applied to the root element if `variant=\"circular\"`. */\n    circular: {},\n\n    /* Styles applied to the root element if `variant=\"rounded\"`. */\n    rounded: {\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `variant=\"square\"`. */\n    square: {\n      borderRadius: 0\n    },\n\n    /* Styles applied to the img element if either `src` or `srcSet` is defined. */\n    img: {\n      width: '100%',\n      height: '100%',\n      textAlign: 'center',\n      // Handle non-square image. The property isn't supported by IE 11.\n      objectFit: 'cover',\n      // Hide alt text.\n      color: 'transparent',\n      // Hide the image broken icon, only works on Chrome.\n      textIndent: 10000\n    },\n\n    /* Styles applied to the fallback icon */\n    fallback: {\n      width: '75%',\n      height: '75%'\n    }\n  };\n};\n\nfunction useLoaded(_ref) {\n  var src = _ref.src,\n      srcSet = _ref.srcSet;\n\n  var _React$useState = React.useState(false),\n      loaded = _React$useState[0],\n      setLoaded = _React$useState[1];\n\n  React.useEffect(function () {\n    if (!src && !srcSet) {\n      return undefined;\n    }\n\n    setLoaded(false);\n    var active = true;\n    var image = new Image();\n    image.src = src;\n    image.srcSet = srcSet;\n\n    image.onload = function () {\n      if (!active) {\n        return;\n      }\n\n      setLoaded('loaded');\n    };\n\n    image.onerror = function () {\n      if (!active) {\n        return;\n      }\n\n      setLoaded('error');\n    };\n\n    return function () {\n      active = false;\n    };\n  }, [src, srcSet]);\n  return loaded;\n}\n\nvar Avatar = /*#__PURE__*/React.forwardRef(function Avatar(props, ref) {\n  var alt = props.alt,\n      childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      imgProps = props.imgProps,\n      sizes = props.sizes,\n      src = props.src,\n      srcSet = props.srcSet,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'circular' : _props$variant,\n      other = _objectWithoutProperties(props, [\"alt\", \"children\", \"classes\", \"className\", \"component\", \"imgProps\", \"sizes\", \"src\", \"srcSet\", \"variant\"]);\n\n  var children = null; // Use a hook instead of onError on the img element to support server-side rendering.\n\n  var loaded = useLoaded({\n    src: src,\n    srcSet: srcSet\n  });\n  var hasImg = src || srcSet;\n  var hasImgNotFailing = hasImg && loaded !== 'error';\n\n  if (hasImgNotFailing) {\n    children = /*#__PURE__*/React.createElement(\"img\", _extends({\n      alt: alt,\n      src: src,\n      srcSet: srcSet,\n      sizes: sizes,\n      className: classes.img\n    }, imgProps));\n  } else if (childrenProp != null) {\n    children = childrenProp;\n  } else if (hasImg && alt) {\n    children = alt[0];\n  } else {\n    children = /*#__PURE__*/React.createElement(Person, {\n      className: classes.fallback\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, classes.system, classes[variant], className, !hasImgNotFailing && classes.colorDefault),\n    ref: ref\n  }, other), children);\n});\nprocess.env.NODE_ENV !== \"production\" ? Avatar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Used in combination with `src` or `srcSet` to\n   * provide an alt attribute for the rendered `img` element.\n   */\n  alt: PropTypes.string,\n\n  /**\n   * Used to render icon or text elements inside the Avatar if `src` is not set.\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: chainPropTypes(PropTypes.object, function (props) {\n    var classes = props.classes;\n\n    if (classes == null) {\n      return null;\n    }\n\n    if (classes.circle != null && // 2 classnames? one from withStyles the other must be custom\n    classes.circle.split(' ').length > 1) {\n      throw new Error(\"Material-UI: The `circle` class is deprecated. Use `circular` instead.\");\n    }\n\n    return null;\n  }),\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Attributes applied to the `img` element if the component is used to display an image.\n   * It can be used to listen for the loading error event.\n   */\n  imgProps: PropTypes.object,\n\n  /**\n   * The `sizes` attribute for the `img` element.\n   */\n  sizes: PropTypes.string,\n\n  /**\n   * The `src` attribute for the `img` element.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The `srcSet` attribute for the `img` element.\n   * Use this attribute for responsive image display.\n   */\n  srcSet: PropTypes.string,\n\n  /**\n   * The shape of the avatar.\n   */\n  variant: chainPropTypes(PropTypes.oneOf(['circle', 'circular', 'rounded', 'square']), function (props) {\n    var variant = props.variant;\n\n    if (variant === 'circle') {\n      throw new Error('Material-UI: `variant=\"circle\"` is deprecated. Use `variant=\"circular\"` instead.');\n    }\n\n    return null;\n  })\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAvatar'\n})(Avatar);","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"\n}), 'ArrowBack');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"\n}), 'Cancel');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport CancelIcon from '../internal/svg-icons/Cancel';\nimport withStyles from '../styles/withStyles';\nimport { emphasize, alpha } from '../styles/colorManipulator';\nimport useForkRef from '../utils/useForkRef';\nimport unsupportedProp from '../utils/unsupportedProp';\nimport capitalize from '../utils/capitalize';\nimport ButtonBase from '../ButtonBase';\nexport var styles = function styles(theme) {\n  var backgroundColor = theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[700];\n  var deleteIconColor = alpha(theme.palette.text.primary, 0.26);\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      fontFamily: theme.typography.fontFamily,\n      fontSize: theme.typography.pxToRem(13),\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: 32,\n      color: theme.palette.getContrastText(backgroundColor),\n      backgroundColor: backgroundColor,\n      borderRadius: 32 / 2,\n      whiteSpace: 'nowrap',\n      transition: theme.transitions.create(['background-color', 'box-shadow']),\n      // label will inherit this from root, then `clickable` class overrides this for both\n      cursor: 'default',\n      // We disable the focus ring for mouse, touch and keyboard users.\n      outline: 0,\n      textDecoration: 'none',\n      border: 'none',\n      // Remove `button` border\n      padding: 0,\n      // Remove `button` padding\n      verticalAlign: 'middle',\n      boxSizing: 'border-box',\n      '&$disabled': {\n        opacity: 0.5,\n        pointerEvents: 'none'\n      },\n      '& $avatar': {\n        marginLeft: 5,\n        marginRight: -6,\n        width: 24,\n        height: 24,\n        color: theme.palette.type === 'light' ? theme.palette.grey[700] : theme.palette.grey[300],\n        fontSize: theme.typography.pxToRem(12)\n      },\n      '& $avatarColorPrimary': {\n        color: theme.palette.primary.contrastText,\n        backgroundColor: theme.palette.primary.dark\n      },\n      '& $avatarColorSecondary': {\n        color: theme.palette.secondary.contrastText,\n        backgroundColor: theme.palette.secondary.dark\n      },\n      '& $avatarSmall': {\n        marginLeft: 4,\n        marginRight: -4,\n        width: 18,\n        height: 18,\n        fontSize: theme.typography.pxToRem(10)\n      }\n    },\n\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {\n      height: 24\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      backgroundColor: theme.palette.primary.main,\n      color: theme.palette.primary.contrastText\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText\n    },\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `onClick` is defined or `clickable={true}`. */\n    clickable: {\n      userSelect: 'none',\n      WebkitTapHighlightColor: 'transparent',\n      cursor: 'pointer',\n      '&:hover, &:focus': {\n        backgroundColor: emphasize(backgroundColor, 0.08)\n      },\n      '&:active': {\n        boxShadow: theme.shadows[1]\n      }\n    },\n\n    /* Styles applied to the root element if `onClick` and `color=\"primary\"` is defined or `clickable={true}`. */\n    clickableColorPrimary: {\n      '&:hover, &:focus': {\n        backgroundColor: emphasize(theme.palette.primary.main, 0.08)\n      }\n    },\n\n    /* Styles applied to the root element if `onClick` and `color=\"secondary\"` is defined or `clickable={true}`. */\n    clickableColorSecondary: {\n      '&:hover, &:focus': {\n        backgroundColor: emphasize(theme.palette.secondary.main, 0.08)\n      }\n    },\n\n    /* Styles applied to the root element if `onDelete` is defined. */\n    deletable: {\n      '&:focus': {\n        backgroundColor: emphasize(backgroundColor, 0.08)\n      }\n    },\n\n    /* Styles applied to the root element if `onDelete` and `color=\"primary\"` is defined. */\n    deletableColorPrimary: {\n      '&:focus': {\n        backgroundColor: emphasize(theme.palette.primary.main, 0.2)\n      }\n    },\n\n    /* Styles applied to the root element if `onDelete` and `color=\"secondary\"` is defined. */\n    deletableColorSecondary: {\n      '&:focus': {\n        backgroundColor: emphasize(theme.palette.secondary.main, 0.2)\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: {\n      backgroundColor: 'transparent',\n      border: \"1px solid \".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'),\n      '$clickable&:hover, $clickable&:focus, $deletable&:focus': {\n        backgroundColor: alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity)\n      },\n      '& $avatar': {\n        marginLeft: 4\n      },\n      '& $avatarSmall': {\n        marginLeft: 2\n      },\n      '& $icon': {\n        marginLeft: 4\n      },\n      '& $iconSmall': {\n        marginLeft: 2\n      },\n      '& $deleteIcon': {\n        marginRight: 5\n      },\n      '& $deleteIconSmall': {\n        marginRight: 3\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`. */\n    outlinedPrimary: {\n      color: theme.palette.primary.main,\n      border: \"1px solid \".concat(theme.palette.primary.main),\n      '$clickable&:hover, $clickable&:focus, $deletable&:focus': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity)\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`. */\n    outlinedSecondary: {\n      color: theme.palette.secondary.main,\n      border: \"1px solid \".concat(theme.palette.secondary.main),\n      '$clickable&:hover, $clickable&:focus, $deletable&:focus': {\n        backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity)\n      }\n    },\n    // TODO v5: remove\n\n    /* Styles applied to the `avatar` element. */\n    avatar: {},\n\n    /* Styles applied to the `avatar` element if `size=\"small\"`. */\n    avatarSmall: {},\n\n    /* Styles applied to the `avatar` element if `color=\"primary\"`. */\n    avatarColorPrimary: {},\n\n    /* Styles applied to the `avatar` element if `color=\"secondary\"`. */\n    avatarColorSecondary: {},\n\n    /* Styles applied to the `icon` element. */\n    icon: {\n      color: theme.palette.type === 'light' ? theme.palette.grey[700] : theme.palette.grey[300],\n      marginLeft: 5,\n      marginRight: -6\n    },\n\n    /* Styles applied to the `icon` element if `size=\"small\"`. */\n    iconSmall: {\n      width: 18,\n      height: 18,\n      marginLeft: 4,\n      marginRight: -4\n    },\n\n    /* Styles applied to the `icon` element if `color=\"primary\"`. */\n    iconColorPrimary: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the `icon` element if `color=\"secondary\"`. */\n    iconColorSecondary: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the label `span` element. */\n    label: {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      paddingLeft: 12,\n      paddingRight: 12,\n      whiteSpace: 'nowrap'\n    },\n\n    /* Styles applied to the label `span` element if `size=\"small\"`. */\n    labelSmall: {\n      paddingLeft: 8,\n      paddingRight: 8\n    },\n\n    /* Styles applied to the `deleteIcon` element. */\n    deleteIcon: {\n      WebkitTapHighlightColor: 'transparent',\n      color: deleteIconColor,\n      height: 22,\n      width: 22,\n      cursor: 'pointer',\n      margin: '0 5px 0 -6px',\n      '&:hover': {\n        color: alpha(deleteIconColor, 0.4)\n      }\n    },\n\n    /* Styles applied to the `deleteIcon` element if `size=\"small\"`. */\n    deleteIconSmall: {\n      height: 16,\n      width: 16,\n      marginRight: 4,\n      marginLeft: -4\n    },\n\n    /* Styles applied to the deleteIcon element if `color=\"primary\"` and `variant=\"default\"`. */\n    deleteIconColorPrimary: {\n      color: alpha(theme.palette.primary.contrastText, 0.7),\n      '&:hover, &:active': {\n        color: theme.palette.primary.contrastText\n      }\n    },\n\n    /* Styles applied to the deleteIcon element if `color=\"secondary\"` and `variant=\"default\"`. */\n    deleteIconColorSecondary: {\n      color: alpha(theme.palette.secondary.contrastText, 0.7),\n      '&:hover, &:active': {\n        color: theme.palette.secondary.contrastText\n      }\n    },\n\n    /* Styles applied to the deleteIcon element if `color=\"primary\"` and `variant=\"outlined\"`. */\n    deleteIconOutlinedColorPrimary: {\n      color: alpha(theme.palette.primary.main, 0.7),\n      '&:hover, &:active': {\n        color: theme.palette.primary.main\n      }\n    },\n\n    /* Styles applied to the deleteIcon element if `color=\"secondary\"` and `variant=\"outlined\"`. */\n    deleteIconOutlinedColorSecondary: {\n      color: alpha(theme.palette.secondary.main, 0.7),\n      '&:hover, &:active': {\n        color: theme.palette.secondary.main\n      }\n    }\n  };\n};\n\nfunction isDeleteKeyboardEvent(keyboardEvent) {\n  return keyboardEvent.key === 'Backspace' || keyboardEvent.key === 'Delete';\n}\n/**\n * Chips represent complex entities in small blocks, such as a contact.\n */\n\n\nvar Chip = /*#__PURE__*/React.forwardRef(function Chip(props, ref) {\n  var avatarProp = props.avatar,\n      classes = props.classes,\n      className = props.className,\n      clickableProp = props.clickable,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      ComponentProp = props.component,\n      deleteIconProp = props.deleteIcon,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      iconProp = props.icon,\n      label = props.label,\n      onClick = props.onClick,\n      onDelete = props.onDelete,\n      onKeyDown = props.onKeyDown,\n      onKeyUp = props.onKeyUp,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'default' : _props$variant,\n      other = _objectWithoutProperties(props, [\"avatar\", \"classes\", \"className\", \"clickable\", \"color\", \"component\", \"deleteIcon\", \"disabled\", \"icon\", \"label\", \"onClick\", \"onDelete\", \"onKeyDown\", \"onKeyUp\", \"size\", \"variant\"]);\n\n  var chipRef = React.useRef(null);\n  var handleRef = useForkRef(chipRef, ref);\n\n  var handleDeleteIconClick = function handleDeleteIconClick(event) {\n    // Stop the event from bubbling up to the `Chip`\n    event.stopPropagation();\n\n    if (onDelete) {\n      onDelete(event);\n    }\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    // Ignore events from children of `Chip`.\n    if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {\n      // will be handled in keyUp, otherwise some browsers\n      // might init navigation\n      event.preventDefault();\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  var handleKeyUp = function handleKeyUp(event) {\n    // Ignore events from children of `Chip`.\n    if (event.currentTarget === event.target) {\n      if (onDelete && isDeleteKeyboardEvent(event)) {\n        onDelete(event);\n      } else if (event.key === 'Escape' && chipRef.current) {\n        chipRef.current.blur();\n      }\n    }\n\n    if (onKeyUp) {\n      onKeyUp(event);\n    }\n  };\n\n  var clickable = clickableProp !== false && onClick ? true : clickableProp;\n  var small = size === 'small';\n  var Component = ComponentProp || (clickable ? ButtonBase : 'div');\n  var moreProps = Component === ButtonBase ? {\n    component: 'div'\n  } : {};\n  var deleteIcon = null;\n\n  if (onDelete) {\n    var customClasses = clsx(color !== 'default' && (variant === \"default\" ? classes[\"deleteIconColor\".concat(capitalize(color))] : classes[\"deleteIconOutlinedColor\".concat(capitalize(color))]), small && classes.deleteIconSmall);\n    deleteIcon = deleteIconProp && /*#__PURE__*/React.isValidElement(deleteIconProp) ? /*#__PURE__*/React.cloneElement(deleteIconProp, {\n      className: clsx(deleteIconProp.props.className, classes.deleteIcon, customClasses),\n      onClick: handleDeleteIconClick\n    }) : /*#__PURE__*/React.createElement(CancelIcon, {\n      className: clsx(classes.deleteIcon, customClasses),\n      onClick: handleDeleteIconClick\n    });\n  }\n\n  var avatar = null;\n\n  if (avatarProp && /*#__PURE__*/React.isValidElement(avatarProp)) {\n    avatar = /*#__PURE__*/React.cloneElement(avatarProp, {\n      className: clsx(classes.avatar, avatarProp.props.className, small && classes.avatarSmall, color !== 'default' && classes[\"avatarColor\".concat(capitalize(color))])\n    });\n  }\n\n  var icon = null;\n\n  if (iconProp && /*#__PURE__*/React.isValidElement(iconProp)) {\n    icon = /*#__PURE__*/React.cloneElement(iconProp, {\n      className: clsx(classes.icon, iconProp.props.className, small && classes.iconSmall, color !== 'default' && classes[\"iconColor\".concat(capitalize(color))])\n    });\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (avatar && icon) {\n      console.error('Material-UI: The Chip component can not handle the avatar ' + 'and the icon prop at the same time. Pick one.');\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    role: clickable || onDelete ? 'button' : undefined,\n    className: clsx(classes.root, className, color !== 'default' && [classes[\"color\".concat(capitalize(color))], clickable && classes[\"clickableColor\".concat(capitalize(color))], onDelete && classes[\"deletableColor\".concat(capitalize(color))]], variant !== \"default\" && [classes.outlined, {\n      'primary': classes.outlinedPrimary,\n      'secondary': classes.outlinedSecondary\n    }[color]], disabled && classes.disabled, small && classes.sizeSmall, clickable && classes.clickable, onDelete && classes.deletable),\n    \"aria-disabled\": disabled ? true : undefined,\n    tabIndex: clickable || onDelete ? 0 : undefined,\n    onClick: onClick,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    ref: handleRef\n  }, moreProps, other), avatar || icon, /*#__PURE__*/React.createElement(\"span\", {\n    className: clsx(classes.label, small && classes.labelSmall)\n  }, label), deleteIcon);\n});\nprocess.env.NODE_ENV !== \"production\" ? Chip.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Avatar element.\n   */\n  avatar: PropTypes.element,\n\n  /**\n   * This prop isn't supported.\n   * Use the `component` prop if you need to change the children structure.\n   */\n  children: unsupportedProp,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the chip will appear clickable, and will raise when pressed,\n   * even if the onClick prop is not defined.\n   * If false, the chip will not be clickable, even if onClick prop is defined.\n   * This can be used, for example,\n   * along with the component prop to indicate an anchor Chip is clickable.\n   */\n  clickable: PropTypes.bool,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Override the default delete icon element. Shown only if `onDelete` is set.\n   */\n  deleteIcon: PropTypes.element,\n\n  /**\n   * If `true`, the chip should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Icon element.\n   */\n  icon: PropTypes.element,\n\n  /**\n   * The content of the label.\n   */\n  label: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Callback function fired when the delete icon is clicked.\n   * If set, the delete icon will be shown.\n   */\n  onDelete: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyUp: PropTypes.func,\n\n  /**\n   * The size of the chip.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['default', 'outlined'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiChip'\n})(Chip);"],"names":["parse","require","StyleToObject","style","iterator","declaration","output","property","value","declarations","hasIterator","i","len","length","module","exports","own","hasOwnProperty","nodeSchema","root","children","all","doctype","schema","allowDoctypes","name","handleDoctypeName","undefined","comment","allowComments","handleCommentValue","element","tagName","handleTagName","properties","node","stack","attrs","attributes","reqs","required","props","allowed","Object","assign","toPropertyValueMap","call","result","key","definition","data","Array","isArray","handlePropertyValues","handlePropertyValue","text","_","allow","position","one","type","replacement","replace","strip","includes","results","index","push","pop","tagNames","ancestors","indexOf","slice","values","prop","url","String","colon","questionMark","numberSign","slash","protocols","concat","safeProtocol","some","test","clobberPrefix","clobber","toLowerCase","rehypeSanitize","options","arguments","defaultSchema","tree","ctx","hastUtilSanitize","tbody","tfoot","thead","td","th","tr","href","cite","src","longDesc","a","img","input","li","div","blockquote","del","ins","q","disabled","hasOwn","prototype","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","arr","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","enumerable","configurable","newValue","writable","getProperty","extend","copy","copyIsArray","clone","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","start","line","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","re","m","exec","comments","rules","c","pos","charAt","val","ret","decl","decls","stringifyPosition","point","VFileMessage","place","origin","parts","super","message","fatal","ruleId","file","actual","expected","note","path","basename","ext","assertPath","seenNonSlash","charCodeAt","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","code","join","joined","_len","segments","_key","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","bufferLike","buffer","messages","history","stored","map","assertNonEmpty","assertPart","stem","encoding","info","fail","part","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","run","middlewareIndex","callback","next","fn","_len2","_key2","middleware","called","wrapped","_len3","parameters","_key3","fnExpectsCallback","done","apply","then","_len4","_key4","wrap","use","middelware","unified","base","transformers","attachers","frozen","namespace","freezeIndex","processor","assertUnfrozen","Parser","Compiler","freeze","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","add","plugin","plugins","entry","isPlainObj","doc","vfile","assertParser","newable","assertCompiler","assertNode","compile","Promise","executor","resolve","reject","runSync","complete","assertDone","process","isBuffer","processSync","destination","keys","asyncName","Boolean","looksLikeAVFile","emptyOptions","includeImageAlt","includeHtml","alt","splice","list","remove","items","chunkStart","from","unshift","syntaxExtension","extension","hook","left","right","constructs","existing","before","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","fromCharCode","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","tokenize","contentStart","attempt","parser","contentInitial","lineStart","previous","token","contentType","document","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","disable","null","blankLine","after","partial","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","toUpperCase","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","character","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","hex","fromMarkdown","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","title","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","endPosition","lastIndex","Math","ceil","preprocess","d","combined","remarkParse","normalizeUri","skip","encodeURIComponent","convert","castFactory","typeFactory","tests","checks","any","anyFactory","propsFactory","CONTINUE","EXIT","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","parent","pointStart","pointEnd","clean","footnoteReference","id","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","codePointAt","handlers","break","className","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","loose","listLoose","child","table","rows","firstRow","tableContent","body","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","cache","definitions","augment","hName","hProperties","hChildren","generated","to","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","bridge","mutate","Schema","normal","space","merge","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","types","DefinedInfo","mask","mark","transform","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","width","writingSuggestions","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","thing","valid","dash","cap","kebab","camelcase","hastToReact","uriTransformer","uri","first","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transformLinkUri","parentSchema","addProperty","listDepth","component","components","basic","React","ReactIs","linkTarget","inline","level","transformImageUri","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","Type","rest","dashes","find","padRight","padLeft","commas","v","styleReplacer","parseStyle","changelog","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehype","remarkRehypeOptions","rehypePlugins","hastNode","propTypes","PropTypes","ccount","checkAsRecord","nodeAsRecord","testFunction","looksLikeANode","empty","SKIP","nodeAsParent","findAndReplace","ignored","pairs","tupleOrList","tuple","toExpression","toFunction","toPairs","pairIndex","grandparent","change","matchObject","global","RegExp","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","domain","split","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","enterFootnoteCallString","enterFootnoteCall","enterFootnoteDefinitionLabelString","enterFootnoteDefinition","exitFootnoteCallString","exitFootnoteCall","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","tracker","createTracker","move","subexit","safe","associationId","gfmFootnoteToMarkdown","firstLineBlank","indentLines","containerFlow","mapAll","mapExceptFirst","unsafe","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","serialize","toAlignment","patternInScope","listInScope","none","_1","checkQuote","quote","encodeCharacterReference","encodeInfo","outside","outsideKind","insideKind","checkEmphasis","betweenHead","betweenTail","attentionEncodeSurroundingInfo","formatHeadingAsSetext","literalWithBreak","testOrVisitor","visitorOrReverse","maybeReverse","setext","expression","compilePattern","formatLinkAsAutolink","resourceLink","checkBullet","bullet","checkRule","rule","phrasing","checkStrong","handle","fence","checkFence","fences","formatCodeAsIndented","repeat","substring","longestStreak","encode","rank","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","defaultHandlers","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","row","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","columnIndex","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","fromCodePoint","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","EditMap","editMap","at","addImplementation","sort","b","vecs","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headRowStart","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","gfm","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteCallString","gfmFootnoteCall","gfmFootnoteDefinitionLabelString","gfmFootnoteDefinition","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmToMarkdown","omit","forEach","styleFunctionSx","styleFunction","newStyleFunction","css","_extends","theme","filterProps","sx","_toConsumableArray","styles","reduce","acc","getPath","_options$cssProperty","cssProperty","themeKey","propValue","themeMapping","handleBreakpoints","propValueFinal","_defineProperty","getBorder","compose","maxWidth","minWidth","maxHeight","minHeight","styled","Component","stylesOptions","_objectWithoutProperties","classNamePrefix","stylesOrCreator","useStyles","makeStyles","displayName","StyledComponent","ref","classNameProp","ComponentProp","other","classes","clsx","FinalComponent","hoistNonReactStatics","componentCreator","styledWithoutDefault","defaultTheme","borders","flexbox","grid","positions","palette","shadows","sizing","typography","u","for","e","f","g","h","l","n","p","t","$$typeof","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","SuspenseList","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isSuspenseList","isValidElementType","getModuleId","createSvgIcon","Avatar","childrenProp","_props$component","imgProps","_props$variant","variant","loaded","_ref","_React$useState","setLoaded","active","Image","onload","onerror","useLoaded","hasImg","hasImgNotFailing","Person","fallback","system","colorDefault","withStyles","alignItems","justifyContent","flexShrink","pxToRem","lineHeight","borderRadius","userSelect","backgroundColor","grey","circle","circular","rounded","square","objectFit","textIndent","isDeleteKeyboardEvent","keyboardEvent","Chip","avatarProp","avatar","clickableProp","clickable","_props$color","deleteIconProp","deleteIcon","_props$disabled","iconProp","icon","onDelete","_props$size","chipRef","handleRef","useForkRef","handleDeleteIconClick","stopPropagation","small","ButtonBase","moreProps","customClasses","capitalize","deleteIconSmall","CancelIcon","avatarSmall","iconSmall","outlined","outlinedPrimary","outlinedSecondary","sizeSmall","deletable","currentTarget","preventDefault","blur","labelSmall","deleteIconColor","alpha","primary","getContrastText","whiteSpace","transition","transitions","outline","verticalAlign","boxSizing","marginLeft","marginRight","contrastText","dark","secondary","colorPrimary","colorSecondary","WebkitTapHighlightColor","emphasize","boxShadow","clickableColorPrimary","clickableColorSecondary","deletableColorPrimary","deletableColorSecondary","hoverOpacity","avatarColorPrimary","avatarColorSecondary","iconColorPrimary","iconColorSecondary","textOverflow","paddingLeft","paddingRight","margin","deleteIconColorPrimary","deleteIconColorSecondary","deleteIconOutlinedColorPrimary","deleteIconOutlinedColorSecondary"],"sourceRoot":""}